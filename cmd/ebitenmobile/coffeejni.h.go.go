// Code generated by file2byteslice. DO NOT EDIT.
// (gofmt is fine after generating)

package main

var coffeejni_h_go = []byte("// Code generated by file2byteslice. DO NOT EDIT.\n// (gofmt is fine after generating)\n\n// +build ebitenmobilegobind\n\npackage main\n\nvar coffeejni_h = []byte(\"/* CoffeeCatch, a tiny native signal handler/catcher for JNI code.\\n * (especially for Android/Dalvik)\\n *\\n * Copyright (c) 2013, Xavier Roche (http://www.httrack.com/)\\n * All rights reserved.\\n * See the \\\"License\\\" section below for the licensing terms.\\n *\\n * Description:\\n *\\n * Allows to \\\"gracefully\\\" recover from a signal (segv, sibus...) as if it was\\n * a Java exception. It will not gracefully recover from allocator/mutexes\\n * corruption etc., however, but at least \\\"most\\\" gentle crashes (null pointer\\n * dereferencing, integer division, stack overflow etc.) should be handled\\n * without too much troubles.\\n *\\n * The handler is thread-safe, but client must have exclusive control on the\\n * signal handlers (ie. the library is installing its own signal handlers on\\n * top of the existing ones).\\n *\\n * You must build all your libraries with `-funwind-tables', to get proper\\n * unwinding information on all binaries. On ARM, you may also use the\\n * `--no-merge-exidx-entries` linker switch, to solve certain issues with\\n * unwinding (the switch is possibly not needed anymore).\\n * On Android, this can be achieved by using this line in the Android.mk file\\n * in each library block:\\n *   LOCAL_CFLAGS := -funwind-tables -Wl,--no-merge-exidx-entries\\n *\\n * Example:\\n * COFFEE_TRY_JNI(env, *retcode = call_dangerous_function(env, object));\\n *\\n * Implementation notes:\\n *\\n * Currently the library is installing both alternate stack and signal\\n * handlers for known signals (SIGABRT, SIGILL, SIGTRAP, SIGBUS, SIGFPE,\\n * SIGSEGV, SIGSTKFLT), and is using sigsetjmp()/siglongjmp() to return to\\n * \\\"userland\\\" (compared to signal handler context). As a security, an alarm\\n * is started as soon as a fatal signal is detected (ie. not something the\\n * JVM will handle) to kill the process after a grace period. Be sure your\\n * program will exit quickly after the error is caught, or call alarm(0)\\n * to cancel the pending time-bomb.\\n * The signal handlers had to be written with caution, because the virtual\\n * machine might be using signals (including SEGV) to handle JIT compiler,\\n * and some clever optimizations (such as NullPointerException handling)\\n * We are using several signal-unsafe functions, namely:\\n * - siglongjmp() to return to userland\\n * - pthread_getspecific() to get thread-specific setup\\n *\\n * License:\\n *\\n * Copyright (c) 2013, Xavier Roche (http://www.httrack.com/)\\n * All rights reserved.\\n *\\n * Redistribution and use in source and binary forms, with or without\\n * modification, are permitted provided that the following conditions are met:\\n *\\n * 1. Redistributions of source code must retain the above copyright notice, this\\n *    list of conditions and the following disclaimer.\\n * 2. Redistributions in binary form must reproduce the above copyright notice,\\n *    this list of conditions and the following disclaimer in the documentation\\n *    and/or other materials provided with the distribution.\\n *\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND\\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n#ifndef COFFEECATCH_JNI_H\\n#define COFFEECATCH_JNI_H\\n\\n#include <jni.h>\\n\\n#ifdef __cplusplus\\nextern \\\"C\\\" {\\n#endif\\n\\n/**\\n * Setup crash handler to enter in a protected section. If a recognized signal\\n * is received in this section, an appropriate native Java Error will be\\n * raised.\\n *\\n * You can not exit the protected section block CODE_TO_BE_EXECUTED, using \\n * statements such as \\\"return\\\", because the cleanup code would not be\\n * executed.\\n *\\n * It is advised to enclose the complete CODE_TO_BE_EXECUTED block in a\\n * dedicated function declared extern or __attribute__ ((noinline)).\\n *\\n * You must build all your libraries with `-funwind-tables', to get proper\\n * unwinding information on all binaries. On Android, this can be achieved\\n * by using this line in the Android.mk file in each library block:\\n *   LOCAL_CFLAGS := -funwind-tables\\n *\\n * Example:\\n *\\n * void my_native_function(JNIEnv* env, jobject object, jint *retcode) {\\n *   COFFEE_TRY_JNI(env, *retcode = call_dangerous_function(env, object));\\n * }\\n *\\n * In addition, the following restrictions MUST be followed:\\n * - the function must be declared extern, or with the special attribute\\n *   __attribute__ ((noinline)).\\n * - you must not use local variables before the COFFEE_TRY_JNI block,\\n *   or define them as \\\"volatile\\\".\\n *\\nCOFFEE_TRY_JNI(JNIEnv* env, CODE_TO_BE_EXECUTED)\\n */\\n\\n/** Internal functions & definitions, not to be used directly. **/\\nextern void coffeecatch_throw_exception(JNIEnv* env);\\n#define COFFEE_TRY_JNI(ENV, CODE)       \\\\\\n  do {                                  \\\\\\n    COFFEE_TRY() {                      \\\\\\n      CODE;                             \\\\\\n    } COFFEE_CATCH() {                  \\\\\\n      coffeecatch_throw_exception(ENV); \\\\\\n    } COFFEE_END();                     \\\\\\n  } while(0)\\n/** End of internal functions & definitions. **/\\n\\n#ifdef __cplusplus\\n}\\n#endif\\n\\n#endif\\n\")\n")
